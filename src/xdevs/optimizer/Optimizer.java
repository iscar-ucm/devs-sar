/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package xdevs.optimizer;

import java.util.ArrayList;
import models.optimizer.Solution;
import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import utils.CSVHandler;
import xdevs.core.modeling.Coupled;
import xdevs.core.modeling.Port;
import xdevs.evaluator.Evaluator;
import xdevs.flightSimulator.FlightSimulator;

/**
 *
 * @author Juan
 */
public class Optimizer extends Coupled {

    // in Ports of the model
    public Port<JSONObject> opI1 = new Port<>("scenario");
    public ArrayList<Port> opI2 = new ArrayList<>(); // set of intermediate solutions from other algorithms 

    // out Ports of the model
    public Port<ArrayList<Solution>> opO1 = new Port<>("exSolutions"); // set of intermediate solutions to other algorithms     
    public Port<ArrayList<Solution>> opO2 = new Port<>("finalSolutions"); //set of final solutions

    public Optimizer(JSONObject jsonRoot, int oIndex, CSVHandler csvHandler) {
        super("OP" + oIndex);

        // variables to be used in the model creation process
        JSONArray targetsArray = (JSONArray) jsonRoot.get("targets");
        JSONArray uavsArray = (JSONArray) jsonRoot.get("uavs");
        JSONArray algorithmsArray = (JSONArray) jsonRoot.get("algorithms");

        // EIC & EOC of the model
        super.addInPort(opI1);
        super.addOutPort(opO1);
        super.addOutPort(opO2);

        // create OP model
        JSONObject algorithmJS = (JSONObject) algorithmsArray.get(oIndex - 1);
        int numSol = (int) (long) algorithmJS.get("ns");
        AlgorithmController ac = new AlgorithmController(
                this.getName(),
                oIndex,
                jsonRoot,
                csvHandler);
        super.addComponent(ac);

        // create one pair FS & EV model per each solution to be generated by
        // the algorithm for every iteration        
        for (int s = 0; s < numSol; ++s) {

            // s solution FS model creations
            FlightSimulator sFS
                    = new FlightSimulator(s + 1, uavsArray);
            super.addComponent(sFS);

            // s solution EV model creations
            Evaluator sEV
                    = new Evaluator(s + 1, uavsArray, targetsArray);
            super.addComponent(sEV);

            // coupling of IC (ac & FS)
            for (int u = 0; u < uavsArray.size(); ++u) {
                super.addCoupling(ac.acO1, sFS.fsI1);
                super.addCoupling(ac.acO3, sFS.fsI2);
                super.addCoupling(ac.acO4.get(s).get(u), sFS.fsI3.get(u));
            }

            // coupling of IC (ac & EV)
            for (int t = 0; t < targetsArray.size(); ++t) {
                super.addCoupling(ac.acO1, sEV.eI1);
                super.addCoupling(ac.acO2, sEV.eI2);
                super.addCoupling(ac.acO5.get(s).get(t), sEV.eI3.get(t));
                super.addCoupling(sEV.eO2.get(t), ac.acI3.get(s).get(t));
            }

            // coupling of IC (FS & EV) & (AC & EV)
            int numSensor = 0;
            for (int u = 0; u < uavsArray.size(); ++u) {
                super.addCoupling(sEV.eO1.get(u), ac.acI2.get(s).get(u));
                super.addCoupling(sFS.fsO2.get(u), sEV.eI5.get(u));
                // coupling of each sensor likelihood
                JSONObject uavJS = (JSONObject) uavsArray.get(u);
                JSONArray sensorsArray = (JSONArray) uavJS.get("sensors");
                for (int k = 0; k < sensorsArray.size(); ++k) {
                    super.addCoupling(sFS.fsO1.get(numSensor), sEV.eI4.get(numSensor));
                    numSensor++;
                }
            }
        }

        // coupling of EIC & EOC
        super.addCoupling(opI1, ac.acI1);
        super.addCoupling(ac.acO6, opO1);
        super.addCoupling(ac.acO7, opO2);

        // for each algorithm 
        for (int a = 0; a < algorithmsArray.size(); ++a) {
            // create the EIC port
            Port<ArrayList<Solution>> aPortI2 = new Port<>(a + "-inSolutions");
            opI2.add(aPortI2);
            super.addInPort(aPortI2);
            // coupling of EIC ports.
            super.addCoupling(opI2.get(a), ac.acI4.get(a));
        }
    }
}
